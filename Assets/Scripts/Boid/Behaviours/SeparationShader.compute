// !! Compute Shader, ne jamais commenter sur la meme ligne qu'un bout de code !!
#pragma kernel SeparationKernel

#include "UnityCG.cginc"

//Structure de boid
struct boid{
    float3 position;
    float3 acceleration;
};
//Buffer de boids
RWStructuredBuffer<boid> currentBuffer;

//Infos a ne recuperer qu'une fois (infos n'appartenant pas a un boid)
CBUFFER_START(Params)
	float intensity;
    float radius;
    float boidsCount;
CBUFFER_END

//Nombre de threads a executer
[numthreads(128,1,1)]
void SeparationKernel (uint3 id : SV_DispatchThreadID)
{
    //Recupère le boid sur lequel le code va agir
    boid boid = currentBuffer[id.x];

    //Initialise les valeurs de calcul
    float3 cAcceleration = float3(0,0,0);

    //Compare chaque boids
    for(int i = 0; i< boidsCount; i++){
        if( distance(boid.position,currentBuffer[i].position) <= radius && distance(boid.position,currentBuffer[i].position) != 0 ) {
            cAcceleration += boid.position - currentBuffer[i].position;
        }
    }

    //Calcule la nouvelle acceleration
    if(distance(cAcceleration,float3(0,0,0)) != 0 ){
        boid.acceleration += intensity * normalize(cAcceleration);
    }
    

    //Met a jour le boid pour lequel le shader viens de faire les calculs
    currentBuffer[id.x] = boid;

}
